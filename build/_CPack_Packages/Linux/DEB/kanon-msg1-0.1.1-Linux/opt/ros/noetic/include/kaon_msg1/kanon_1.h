// Generated by gencpp from file kaon_msg1/kanon_1.msg
// DO NOT EDIT!


#ifndef KAON_MSG1_MESSAGE_KANON_1_H
#define KAON_MSG1_MESSAGE_KANON_1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kaon_msg1
{
template <class ContainerAllocator>
struct kanon_1_
{
  typedef kanon_1_<ContainerAllocator> Type;

  kanon_1_()
    : name()
    , address()
    , cc(0)  {
    }
  kanon_1_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , address(_alloc)
    , cc(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _address_type;
  _address_type address;

   typedef int32_t _cc_type;
  _cc_type cc;





  typedef boost::shared_ptr< ::kaon_msg1::kanon_1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kaon_msg1::kanon_1_<ContainerAllocator> const> ConstPtr;

}; // struct kanon_1_

typedef ::kaon_msg1::kanon_1_<std::allocator<void> > kanon_1;

typedef boost::shared_ptr< ::kaon_msg1::kanon_1 > kanon_1Ptr;
typedef boost::shared_ptr< ::kaon_msg1::kanon_1 const> kanon_1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kaon_msg1::kanon_1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kaon_msg1::kanon_1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kaon_msg1::kanon_1_<ContainerAllocator1> & lhs, const ::kaon_msg1::kanon_1_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.address == rhs.address &&
    lhs.cc == rhs.cc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kaon_msg1::kanon_1_<ContainerAllocator1> & lhs, const ::kaon_msg1::kanon_1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kaon_msg1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kaon_msg1::kanon_1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kaon_msg1::kanon_1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kaon_msg1::kanon_1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kaon_msg1::kanon_1_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaon_msg1::kanon_1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kaon_msg1::kanon_1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kaon_msg1::kanon_1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38d468284c337c834f1f3eb198d91791";
  }

  static const char* value(const ::kaon_msg1::kanon_1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38d468284c337c83ULL;
  static const uint64_t static_value2 = 0x4f1f3eb198d91791ULL;
};

template<class ContainerAllocator>
struct DataType< ::kaon_msg1::kanon_1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kaon_msg1/kanon_1";
  }

  static const char* value(const ::kaon_msg1::kanon_1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kaon_msg1::kanon_1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string address\n"
"int32 cc\n"
;
  }

  static const char* value(const ::kaon_msg1::kanon_1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kaon_msg1::kanon_1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.address);
      stream.next(m.cc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kanon_1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kaon_msg1::kanon_1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kaon_msg1::kanon_1_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.address);
    s << indent << "cc: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KAON_MSG1_MESSAGE_KANON_1_H
